"""
FastAPI –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π
"""
import os
import json
import asyncio
from typing import Dict, List, Optional
from fastapi import FastAPI, HTTPException, BackgroundTasks, WebSocket, WebSocketDisconnect
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
import asyncio
import json
from llm.yandexgpt import YandexGPT
from llm.cloudrugpt import CloudRuGPT
from web_workflow import WebGraph, get_web_analysis_results
from agent import Agent
from models import AgentOpinion, AggregatedDecision, RiskAssessment
from utils import aggregate_agent_opinions
from backtest import BacktestEngine
from dotenv import load_dotenv
app = FastAPI(title="–ú—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏–∑–∞ –∞–∫—Ü–∏–π", version="1.0.0")

app.mount("/static", StaticFiles(directory="static"), name="static")

analysis_results = {
    "status": "ready",
    "portfolio": {},
    "news": [],
    "agent_opinions": [],
    "aggregated_decisions": [],
    "risk_assessments": [],
    "final_recommendations": "",
    "error": None
}

agent_instance = None

class ConnectionManager:
    def __init__(self):
        self.active_connections: List[WebSocket] = []

    async def connect(self, websocket: WebSocket):
        await websocket.accept()
        self.active_connections.append(websocket)

    def disconnect(self, websocket: WebSocket):
        self.active_connections.remove(websocket)

    async def send_personal_message(self, message: str, websocket: WebSocket):
        await websocket.send_text(message)

    async def broadcast(self, message: str):
        for connection in self.active_connections:
            try:
                await connection.send_text(message)
            except:
                self.active_connections.remove(connection)

manager = ConnectionManager()

class AnalysisRequest(BaseModel):
    message: str = "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"

class AnalysisResponse(BaseModel):
    status: str
    message: Optional[str] = None
    error: Optional[str] = None

load_dotenv()

async def initialize_agent():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∞–≥–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global agent_instance
    
    try:
        folder_id = os.getenv("YANDEX_FOLDER_ID")
        api_key = os.getenv("YANDEX_API_KEY")
        cloudru_api_key = os.getenv("CLOUDRU_API_KEY")
        if not folder_id or not api_key:
            print("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è YANDEX_FOLDER_ID –∏ YANDEX_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–∫-–≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
            from mock_llm import MockYandexGPT
            llm = MockYandexGPT(folder_id="demo", api_key="demo")
        else:
            # llm = YandexGPT(folder_id=folder_id, api_key=api_key)
            llm = CloudRuGPT(api_key=cloudru_api_key)
        
        graph = WebGraph(llm)
        compiled_graph = graph.get_graph()
        agent_instance = Agent(llm, compiled_graph)
        
        print("‚úÖ –ê–≥–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        from mock_llm import MockYandexGPT
        llm = MockYandexGPT(folder_id="demo", api_key="demo")
        graph = WebGraph(llm)
        compiled_graph = graph.get_graph()
        agent_instance = Agent(llm, compiled_graph)

async def run_analysis_background():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
    global analysis_results, agent_instance
    
    try:
        analysis_results["status"] = "analyzing"
        analysis_results["error"] = None
        
        await manager.broadcast(json.dumps({
            "type": "status",
            "message": "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è...",
            "status": "analyzing"
        }))
        
        await manager.broadcast(json.dumps({
            "type": "status", 
            "message": "üìä –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –Ω–æ–≤–æ—Å—Ç–∏...",
            "status": "loading_data"
        }))
        
        with open("user_portfolio.json", "r", encoding="utf-8") as f:
            analysis_results["portfolio"] = json.load(f)
        
        with open("sample_news.json", "r", encoding="utf-8") as f:
            analysis_results["news"] = json.load(f)
        
        if not agent_instance:
            raise Exception("–ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        await manager.broadcast(json.dumps({
            "type": "status",
            "message": "ü§ñ –ê–≥–µ–Ω—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ...",
            "status": "agents_discussing"
        }))
        
        result = agent_instance.process_message("–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
        
        web_results = get_web_analysis_results()
        
        for opinion in web_results["agent_opinions"]:
            await manager.broadcast(json.dumps({
                "type": "agent_opinion",
                "data": {
                    "agent_name": opinion.agent_name,
                    "ticker": opinion.ticker,
                    "action": opinion.action,
                    "confidence": opinion.confidence,
                    "reasoning": opinion.reasoning
                }
            }))
            await asyncio.sleep(0.5)  
        
        await manager.broadcast(json.dumps({
            "type": "status",
            "message": "üîÑ –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤...",
            "status": "aggregating"
        }))
        
        for decision in web_results["aggregated_decisions"]:
            await manager.broadcast(json.dumps({
                "type": "aggregated_decision",
                "data": {
                    "ticker": decision.ticker,
                    "final_action": decision.final_action,
                    "confidence_score": decision.confidence_score,
                    "consensus_strength": decision.consensus_strength
                }
            }))
            await asyncio.sleep(0.3)
        
        await manager.broadcast(json.dumps({
            "type": "status",
            "message": "‚ö†Ô∏è –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–∏—Å–∫–∏...",
            "status": "risk_assessment"
        }))
        
        for risk in web_results["risk_assessments"]:
            await manager.broadcast(json.dumps({
                "type": "risk_assessment",
                "data": {
                    "ticker": risk.ticker,
                    "risk_level": risk.risk_level,
                    "risk_factors": risk.risk_factors,
                    "recommendations": risk.recommendations
                }
            }))
            await asyncio.sleep(0.3)
        
        await manager.broadcast(json.dumps({
            "type": "status",
            "message": "üìã –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏...",
            "status": "finalizing"
        }))
        
        await manager.broadcast(json.dumps({
            "type": "final_recommendations",
            "data": {
                "recommendations": web_results["final_recommendations"]
            }
        }))
        
        analysis_results["agent_opinions"] = web_results["agent_opinions"]
        analysis_results["aggregated_decisions"] = web_results["aggregated_decisions"]
        analysis_results["risk_assessments"] = web_results["risk_assessments"]
        analysis_results["final_recommendations"] = web_results["final_recommendations"]
        analysis_results["status"] = "completed"
        
        await manager.broadcast(json.dumps({
            "type": "status",
            "message": "‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!",
            "status": "completed"
        }))
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
    except Exception as e:
        analysis_results["status"] = "error"
        analysis_results["error"] = str(e)
        await manager.broadcast(json.dumps({
            "type": "error",
            "message": f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}",
            "status": "error"
        }))
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")

@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await initialize_agent()

@app.get("/", response_class=HTMLResponse)
async def read_root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    with open("templates/index.html", "r", encoding="utf-8") as f:
        return HTMLResponse(content=f.read())

@app.post("/api/start_analysis", response_model=AnalysisResponse)
async def start_analysis(background_tasks: BackgroundTasks):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    if analysis_results["status"] == "analyzing":
        raise HTTPException(status_code=400, detail="–ê–Ω–∞–ª–∏–∑ —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è")
    
    analysis_results["status"] = "ready"
    analysis_results["agent_opinions"] = []
    analysis_results["aggregated_decisions"] = []
    analysis_results["risk_assessments"] = []
    analysis_results["final_recommendations"] = ""
    analysis_results["error"] = None
    
    background_tasks.add_task(run_analysis_background)
    
    return AnalysisResponse(
        status="started",
        message="–ê–Ω–∞–ª–∏–∑ –∑–∞–ø—É—â–µ–Ω"
    )

@app.get("/api/status")
async def get_status():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–Ω–∞–ª–∏–∑–∞"""
    return analysis_results

@app.get("/api/portfolio")
async def get_portfolio():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    try:
        with open("user_portfolio.json", "r", encoding="utf-8") as f:
            portfolio = json.load(f)
        return portfolio
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")
        return {}

@app.get("/api/news")
async def get_news():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏"""
    try:
        with open("sample_news.json", "r", encoding="utf-8") as f:
            news = json.load(f)
        return news
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π: {e}")
        return []

@app.get("/api/agent_opinions")
async def get_agent_opinions():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
    return analysis_results.get("agent_opinions", [])

@app.get("/api/risk_assessments")
async def get_risk_assessments():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–æ–≤"""
    return analysis_results.get("risk_assessments", [])

@app.get("/api/recommendations")
async def get_recommendations():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    return {
        "recommendations": analysis_results.get("final_recommendations", "")
    }

@app.get("/api/health")
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return {
        "status": "healthy",
        "agent_initialized": agent_instance is not None,
        "analysis_status": analysis_results["status"]
    }

@app.get("/api/backtest")
async def run_backtest(days: int = 7):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
    
    Args:
        days: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 7)
    
    Returns:
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∞
    """
    if not agent_instance:
        raise HTTPException(status_code=500, detail="–ê–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    if days < 1 or days > 30:
        raise HTTPException(status_code=400, detail="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 30")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏ –Ω–æ–≤–æ—Å—Ç–µ–π
        with open("user_portfolio.json", "r", encoding="utf-8") as f:
            user_portfolio = json.load(f)
        
        with open("sample_news.json", "r", encoding="utf-8") as f:
            news_data = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –¥–≤–∏–∂–æ–∫ –±—ç–∫—Ç–µ—Å—Ç–∞
        backtest_engine = BacktestEngine(agent_instance.llm)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
        result = backtest_engine.run_backtest(days, user_portfolio, news_data)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ JSON-—Å–µ—Ä–∏–∞–ª–∏–∑—É–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
        backtest_result = {
            "start_date": result.start_date.isoformat(),
            "end_date": result.end_date.isoformat(),
            "initial_portfolio_value": result.initial_portfolio_value,
            "final_portfolio_value": result.final_portfolio_value,
            "total_pnl": result.total_pnl,
            "total_return_pct": result.total_return_pct,
            "ticker_performance": result.ticker_performance,
            "daily_results": [
                {
                    "date": day.date.isoformat(),
                    "ticker": day.ticker,
                    "open_price": day.open_price,
                    "close_price": day.close_price,
                    "high_price": day.high_price,
                    "low_price": day.low_price,
                    "volume": day.volume,
                    "signal": day.signal,
                    "confidence": day.confidence,
                    "daily_pnl": day.daily_pnl,
                    "cumulative_pnl": day.cumulative_pnl
                }
                for day in result.daily_results
            ]
        }
        
        return {
            "status": "completed",
            "message": f"–ë—ç–∫—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {days} –¥–Ω–µ–π",
            "result": backtest_result
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∞: {str(e)}")

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket endpoint –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"""
    await manager.connect(websocket)
    try:
        while True:
            data = await websocket.receive_text()
            await manager.send_personal_message(json.dumps({
                "type": "pong",
                "message": "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ"
            }), websocket)
    except WebSocketDisconnect:
        manager.disconnect(websocket)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=5000)
