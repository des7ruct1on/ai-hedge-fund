import json
import re
from typing import List, Dict
from models import AgentOpinion
from prompts import PROMPTS
from llm.yandexgpt import YandexGPT


class InvestorAgent:
    def __init__(self, name: str, llm: YandexGPT):
        self.name = name
        self.llm = llm
        self.prompt = PROMPTS.get(name, "")
    
    def analyze_ticker(self, ticker: str, news_data: List[Dict], user_portfolio: Dict) -> AgentOpinion:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–Ω–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞"""
        
        print(f"\nüí≠ {self.name} –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç {ticker}...")
        
        context = self._build_context(ticker, news_data, user_portfolio)
        
        full_prompt = f"{self.prompt}\n\n{context}"
        
        try:
            response = self.llm.complete(full_prompt, temperature=0.7, max_tokens=1000)
            
            print(f"üìù {self.name} –≥–æ–≤–æ—Ä–∏—Ç:")
            print(f"   {response.strip()}")
            
            opinion = self._parse_agent_response(ticker, response)
            
            print(f"‚úÖ {self.name} —Ä–µ—à–∞–µ—Ç: {opinion.action} {ticker} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {opinion.confidence}/10)")
            
            return opinion
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ {ticker} –∞–≥–µ–Ω—Ç–æ–º {self.name}: {e}")
            return AgentOpinion(
                agent_name=self.name,
                ticker=ticker,
                action="HOLD",
                confidence=1,
                reasoning=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}"
            )
    
    def _build_context(self, ticker: str, news_data: List[Dict], user_portfolio: Dict) -> str:
        """–°—Ç—Ä–æ–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        context = f"–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∞–∫—Ü–∏—é {ticker}.\n\n"
        
        ticker_news = [news for news in news_data if news.get('ticker') == ticker]
        if ticker_news:
            context += "–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∞–∫—Ü–∏–∏:\n"
            for news in ticker_news[:5]:  
                context += f"- {news.get('title', '')}: {news.get('summary', '')}\n"
            context += "\n"
        
        if ticker in user_portfolio:
            position = user_portfolio[ticker]
            context += f"–¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ: {position.get('quantity', 0)} –∞–∫—Ü–∏–π, "
            context += f"—Å—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: {position.get('avg_price', 0)} —Ä—É–±.\n\n"
        
        context += "–î–∞–π —Å–≤–æ–µ –º–Ω–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        context += "–î–ï–ô–°–¢–í–ò–ï: [–ö–£–ü–ò–¢–¨/–ü–†–û–î–ê–¢–¨/–î–ï–†–ñ–ê–¢–¨]\n"
        context += "–£–í–ï–†–ï–ù–ù–û–°–¢–¨: [1-10]\n"
        context += "–û–ë–û–°–ù–û–í–ê–ù–ò–ï: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è]"
        
        return context
    
    def _parse_agent_response(self, ticker: str, response: str) -> AgentOpinion:
        """–ü–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç –∞–≥–µ–Ω—Ç–∞ –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"""

        action = "HOLD"  
        response_upper = response.upper()
        
        if "–ö–£–ü–ò–¢–¨" in response_upper or "BUY" in response_upper:
            action = "BUY"
        elif "–ü–†–û–î–ê–¢–¨" in response_upper or "SELL" in response_upper:
            action = "SELL"
        elif "–î–ï–†–ñ–ê–¢–¨" in response_upper or "HOLD" in response_upper:
            action = "HOLD"
        
        confidence = 5 
        numbers = re.findall(r'\b(\d+)\b', response)
        if numbers:
            for num in numbers:
                num_int = int(num)
                if 1 <= num_int <= 10:
                    confidence = num_int
                    break
        
        reasoning = response.strip()
        
        return AgentOpinion(
            agent_name=self.name,
            ticker=ticker,
            action=action,
            confidence=confidence,
            reasoning=reasoning
        )


class InvestorAgentRoom:
    def __init__(self, llm: YandexGPT):
        self.llm = llm
        self.agents = {
            "Buffett": InvestorAgent("Buffett", llm),
            "Trump": InvestorAgent("Trump", llm),
            "Dalio": InvestorAgent("Dalio", llm)
        }
    
    def discuss_portfolio(self, user_portfolio: Dict, news_data: List[Dict]) -> List[AgentOpinion]:
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –æ–±—Å—É–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –≤—Å–µ–º–∏ –∞–≥–µ–Ω—Ç–∞–º–∏"""
        all_opinions = []
        
        tickers = set()
        if user_portfolio:
            tickers.update(user_portfolio.keys())
        
        for news in news_data:
            if news.get('ticker'):
                tickers.add(news['ticker'])
        
        print(f"\nüèõÔ∏è –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –°–û–í–ï–©–ê–ù–ò–ï –ò–ù–í–ï–°–¢–ò–¶–ò–û–ù–ù–û–ì–û –ö–û–ú–ò–¢–ï–¢–ê")
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤: {', '.join(sorted(tickers))}")
        print(f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: {', '.join(self.agents.keys())}")
        print("=" * 60)
        
        for i, ticker in enumerate(tickers, 1):
            print(f"\nüìà –û–ë–°–£–ñ–î–ï–ù–ò–ï –¢–ò–ö–ï–†–ê {i}/{len(tickers)}: {ticker}")
            print("-" * 40)
            
            for agent_name, agent in self.agents.items():
                opinion = agent.analyze_ticker(ticker, news_data, user_portfolio)
                all_opinions.append(opinion)
            
            print(f"üèÅ –û–±—Å—É–∂–¥–µ–Ω–∏–µ {ticker} –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        
        print(f"\nüéØ –°–û–í–ï–©–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print(f"üìã –ü–æ–ª—É—á–µ–Ω–æ {len(all_opinions)} –º–Ω–µ–Ω–∏–π –æ—Ç –∞–≥–µ–Ω—Ç–æ–≤")
        print("=" * 60)
        
        return all_opinions
