"""
–ú–æ–¥—É–ª—å –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—à–µ–Ω–∏–π –∞–≥–µ–Ω—Ç–æ–≤
"""
import json
import datetime as dt
from typing import Dict, List, Any, Optional, Tuple
from dataclasses import dataclass
from .utils import moex_candles_by_date
from .investor_agents import InvestorAgentRoom
from .models import AgentOpinion, AggregatedDecision
from .utils import aggregate_agent_opinions



@dataclass
class BacktestPosition:
    """–ü–æ–∑–∏—Ü–∏—è –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    ticker: str
    quantity: int
    avg_price: float
    current_price: float = 0.0
    
    @property
    def market_value(self) -> float:
        return self.quantity * self.current_price
    
    @property
    def cost_basis(self) -> float:
        return self.quantity * self.avg_price
    
    @property
    def pnl(self) -> float:
        return self.market_value - self.cost_basis


@dataclass
class BacktestDay:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–¥–Ω–æ–≥–æ –¥–Ω—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
    date: dt.date
    ticker: str
    open_price: float
    close_price: float
    high_price: float
    low_price: float
    volume: int
    signal: str  # BUY/SELL/HOLD
    confidence: float
    position_before: BacktestPosition
    position_after: BacktestPosition
    daily_pnl: float
    cumulative_pnl: float


@dataclass
class BacktestResult:
    """–ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±—ç–∫—Ç–µ—Å—Ç–∞"""
    start_date: dt.date
    end_date: dt.date
    initial_portfolio_value: float
    final_portfolio_value: float
    total_pnl: float
    total_return_pct: float
    daily_results: List[BacktestDay]
    ticker_performance: Dict[str, Dict[str, float]]


class BacktestEngine:
    """–î–≤–∏–∂–æ–∫ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
    
    def __init__(self, llm, initial_cash: float = 1000000.0):
        self.llm = llm
        self.initial_cash = initial_cash
        self.agent_room = InvestorAgentRoom(llm)
    
    def run_backtest(
        self, 
        days: int, 
        user_portfolio: Dict[str, Any],
        news_data: List[Dict[str, Any]]
    ) -> BacktestResult:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ç–∫—Ç–µ—Å—Ç –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
        
        Args:
            days: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞
            user_portfolio: –Ω–∞—á–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            news_data: –Ω–æ–≤–æ—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
            
        Returns:
            BacktestResult —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –±—ç–∫—Ç–µ—Å—Ç–∞
        """
        end_date = dt.date.today()
        start_date = end_date - dt.timedelta(days=days)
        
        print(f"üöÄ –ó–∞–ø—É—Å–∫ –±—ç–∫—Ç–µ—Å—Ç–∞ —Å {start_date} –ø–æ {end_date} ({days} –¥–Ω–µ–π)")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        tickers = list(user_portfolio.keys())
        if not tickers:
            raise ValueError("–ü–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç - –Ω–µ—Ç —Ç–∏–∫–µ—Ä–æ–≤ –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞")
        
        print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(tickers)} —Ç–∏–∫–µ—Ä–æ–≤: {', '.join(tickers)}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤
        historical_data = self._load_historical_data(tickers, start_date, end_date)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
        portfolio = self._initialize_portfolio(user_portfolio, historical_data, start_date)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        initial_value = sum(pos.market_value for pos in portfolio.values())
        
        daily_results = []
        cumulative_pnl = 0.0
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –¥–Ω—é
        current_date = start_date
        while current_date <= end_date:
            print(f"üìÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–Ω—å: {current_date}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            day_decisions = self._get_day_decisions(
                current_date, portfolio, news_data, historical_data
            )
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å
            day_pnl = self._apply_decisions(
                current_date, day_decisions, portfolio, historical_data
            )
            
            cumulative_pnl += day_pnl
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω—è
            for ticker in tickers:
                if ticker in historical_data and current_date in historical_data[ticker]:
                    candle = historical_data[ticker][current_date]
                    decision = day_decisions.get(ticker)
                    
                    if decision and ticker in portfolio:
                        daily_results.append(BacktestDay(
                            date=current_date,
                            ticker=ticker,
                            open_price=candle['open'],
                            close_price=candle['close'],
                            high_price=candle['high'],
                            low_price=candle['low'],
                            volume=candle['volume'],
                            signal=decision.final_action,
                            confidence=decision.confidence_score,
                            position_before=portfolio[ticker],
                            position_after=portfolio[ticker],
                            daily_pnl=day_pnl / len(tickers),  # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º PnL –ø–æ —Ç–∏–∫–µ—Ä–∞–º
                            cumulative_pnl=cumulative_pnl
                        ))
            
            current_date += dt.timedelta(days=1)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è
        final_value = sum(pos.market_value for pos in portfolio.values())
        total_pnl = final_value - initial_value
        total_return_pct = (total_pnl / initial_value) * 100 if initial_value > 0 else 0
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–∫–µ—Ä–∞–º
        ticker_performance = self._analyze_ticker_performance(daily_results)
        
        return BacktestResult(
            start_date=start_date,
            end_date=end_date,
            initial_portfolio_value=initial_value,
            final_portfolio_value=final_value,
            total_pnl=total_pnl,
            total_return_pct=total_return_pct,
            daily_results=daily_results,
            ticker_performance=ticker_performance
        )
    
    def _load_historical_data(
        self, 
        tickers: List[str], 
        start_date: dt.date, 
        end_date: dt.date
    ) -> Dict[str, Dict[dt.date, Dict[str, float]]]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å MOEX"""
        historical_data = {}
        
        for ticker in tickers:
            print(f"üìà –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è {ticker}...")
            candles = moex_candles_by_date(ticker, start_date, end_date)
            
            ticker_data = {}
            for candle in candles:
                # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ MOEX
                date_str = candle['begin'][:10]  # YYYY-MM-DD
                date = dt.datetime.strptime(date_str, '%Y-%m-%d').date()
                
                ticker_data[date] = {
                    'open': float(candle['open']),
                    'high': float(candle['high']),
                    'low': float(candle['low']),
                    'close': float(candle['close']),
                    'volume': int(candle['volume'])
                }
            
            historical_data[ticker] = ticker_data
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(ticker_data)} –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {ticker}")
        
        return historical_data
    
    def _initialize_portfolio(
        self, 
        user_portfolio: Dict[str, Any], 
        historical_data: Dict[str, Dict[dt.date, Dict[str, float]]],
        start_date: dt.date
    ) -> Dict[str, BacktestPosition]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –±—ç–∫—Ç–µ—Å—Ç–∞"""
        portfolio = {}
        
        for ticker, position_data in user_portfolio.items():
            if ticker in historical_data and start_date in historical_data[ticker]:
                current_price = historical_data[ticker][start_date]['close']
                
                portfolio[ticker] = BacktestPosition(
                    ticker=ticker,
                    quantity=position_data.get('quantity', 0),
                    avg_price=position_data.get('avg_price', current_price),
                    current_price=current_price
                )
        
        return portfolio
    
    def _get_day_decisions(
        self,
        current_date: dt.date,
        portfolio: Dict[str, BacktestPosition],
        news_data: List[Dict[str, Any]],
        historical_data: Dict[str, Dict[dt.date, Dict[str, float]]]
    ) -> Dict[str, AggregatedDecision]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –¥–Ω—è"""
        # –°–æ–∑–¥–∞–µ–º "—Ç–µ–∫—É—â–∏–π" –ø–æ—Ä—Ç—Ñ–µ–ª—å –¥–ª—è –∞–≥–µ–Ω—Ç–æ–≤
        current_portfolio = {}
        for ticker, pos in portfolio.items():
            current_portfolio[ticker] = {
                'quantity': pos.quantity,
                'avg_price': pos.avg_price
            }
        
        # –ü–æ–ª—É—á–∞–µ–º –º–Ω–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        agent_opinions = self.agent_room.discuss_portfolio(current_portfolio, news_data)
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º —Ä–µ—à–µ–Ω–∏—è
        aggregated_decisions = aggregate_agent_opinions(agent_opinions)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        decisions_dict = {decision.ticker: decision for decision in aggregated_decisions}
        
        return decisions_dict
    
    def _apply_decisions(
        self,
        current_date: dt.date,
        decisions: Dict[str, AggregatedDecision],
        portfolio: Dict[str, BacktestPosition],
        historical_data: Dict[str, Dict[dt.date, Dict[str, float]]]
    ) -> float:
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ä–µ—à–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
        total_pnl = 0.0
        
        for ticker, decision in decisions.items():
            if ticker not in portfolio or ticker not in historical_data:
                continue
            
            if current_date not in historical_data[ticker]:
                continue
            
            current_price = historical_data[ticker][current_date]['close']
            position = portfolio[ticker]
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            position.current_price = current_price
            
            # –í—ã—á–∏—Å–ª—è–µ–º PnL –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
            position_pnl = position.pnl
            total_pnl += position_pnl
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è —Å–¥–µ–ª–æ–∫
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—ã –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º PnL
        
        return total_pnl
    
    def _analyze_ticker_performance(
        self, 
        daily_results: List[BacktestDay]
    ) -> Dict[str, Dict[str, float]]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–∫–µ—Ä–∞–º"""
        ticker_performance = {}
        
        for result in daily_results:
            ticker = result.ticker
            if ticker not in ticker_performance:
                ticker_performance[ticker] = {
                    'total_pnl': 0.0,
                    'total_return_pct': 0.0,
                    'max_drawdown': 0.0,
                    'win_rate': 0.0,
                    'avg_confidence': 0.0
                }
            
            ticker_performance[ticker]['total_pnl'] += result.daily_pnl
            ticker_performance[ticker]['avg_confidence'] += result.confidence
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        for ticker in ticker_performance:
            ticker_data = ticker_performance[ticker]
            ticker_days = [r for r in daily_results if r.ticker == ticker]
            
            if ticker_days:
                ticker_data['avg_confidence'] /= len(ticker_days)
                
                # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å
                initial_value = ticker_days[0].position_before.market_value
                if initial_value > 0:
                    ticker_data['total_return_pct'] = (ticker_data['total_pnl'] / initial_value) * 100
        
        return ticker_performance
